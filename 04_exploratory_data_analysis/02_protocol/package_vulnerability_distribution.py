import os
import argparse
import matplotlib.pyplot as plt
import datetime
import numpy as np
import pandas as pd


def build_graph(names, counts, output, tool):
    split_names = [name.split() for name in names]
    formatted_names = ['\n'.join(parts) for parts in split_names]
    plt.figure(figsize=(16, 6))
    x = np.arange(len(names))
    plt.bar(x, counts, color='skyblue')
    plt.xticks(x, formatted_names, rotation=90, ha='right', fontsize=14)
    plt.ylabel('Vulnerability Count', fontsize=16)
    plt.xlabel('Package Name & Version', fontsize=16)
    plt.title(f'Most Vulnerable Packages - {tool}', fontsize=20)
    plt.tight_layout()
    plt.ylim(0,605)
    print(f"\nSaving most vulnerable packages from {tool} findings bar plot")
    d = datetime.datetime.now()
    plt.savefig(output + f'{d.month}-{d.day}-{d.year}-{d.hour}-{d.minute}_vul_packages_{tool}_bar.png')
    plt.clf()


def main():
    # Create argument parser
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-i", "--input", dest="input", default="", help="")
    parser.add_argument("-o", "--output", dest="output", default="", help="")
    parser.add_argument("-h", "--help", dest="help", default="", action="store_true", help="Help")

    args = parser.parse_args()
    _input = args.input + "/"
    output = args.output + "/"

    if not os.path.exists(_input):
        print("Path given does not exist or is not a directory")

    for filename in os.listdir(_input):
        if filename.endswith('.csv') and "package" in filename:
            df = pd.read_csv(_input + filename)
            if "grype" in filename:
                build_graph(df['name'], df['grype_counts'], output, "Grype")
            elif 'trivy' in filename:
                build_graph(df['name'], df['trivy_counts'], output, "Trivy")


main()
